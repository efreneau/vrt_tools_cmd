
.. _program_listing_file__home_emil_vrt_tools_cmd_print_src_main.cpp:

Program Listing for File main.cpp
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_emil_vrt_tools_cmd_print_src_main.cpp>` (``/home/emil/vrt_tools_cmd/print/src/main.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include <cstdlib>
   #include <iostream>
   #include <map>
   #include <stdexcept>
   #include <string>
   
   #include <vrt/vrt_util.h>
   
   #include "CLI11/CLI11.hpp"
   
   #include "process.h"
   #include "program_arguments.h"
   
   static vrt::print::ProgramArguments setup_arg_parse(CLI::App* app) {
       vrt::print::ProgramArguments args;
   
       CLI::Option* opt_file{app->add_option("-f,--file,file", args.file_path, "Input file path")};
       opt_file->required(true);
       opt_file->check(CLI::ExistingFile);
   
       CLI::Option* opt_packet_skip{app->add_option(
           "-s,--packet_skip", args.packet_skip,
           "Number of packets to skip before starting to print. Supports prefixes such as k, M, G, and T.")};
       opt_packet_skip->check(CLI::NonNegativeNumber);
       // Put prefixes in reverse order, so they are shown in ascending order.
       opt_packet_skip->transform(CLI::AsNumberWithUnit(
           std::map<std::string, std::size_t>{{"T", 1000000000000}, {"G", 1000000000}, {"M", 1000000}, {"k", 1000}},
           CLI::AsNumberWithUnit::CASE_SENSITIVE));
   
       args.packet_count = static_cast<size_t>(-1);
       CLI::Option* opt_packet_count{
           app->add_option("-c,--packet_count", args.packet_count,
                           "Number of packets to print. Supports prefixes such as k, M, G, and T.")};
       opt_packet_count->check(CLI::PositiveNumber);
       opt_packet_count->transform(CLI::AsNumberWithUnit(
           std::map<std::string, std::size_t>{{"T", 1000000000000}, {"G", 1000000000}, {"M", 1000000}, {"k", 1000}},
           CLI::AsNumberWithUnit::CASE_SENSITIVE));
   
       app->add_flag("-b,--byte_swap", args.do_byte_swap, "Apply byte swap before parsing file");
   
       return args;
   }
   
   int main(int argc, const char** argv) {
       // Overall design: Print information directly when it's available. This makes debugging broken packet streams
       // easier. Flush only when exiting program for performance.
   
       // Speed up output
       std::ios_base::sync_with_stdio(false);
   
       CLI::App app(
           "Prints information in vita49 VRT format files in a human readable format. Only prints, does not "
           "validate packets.",
           "vrt_print");
   
       vrt::print::ProgramArguments program_args{setup_arg_parse(&app)};
       CLI11_PARSE(app, argc, argv)
   
       // Check that endianness of platform compared to byte swap parameter makes sense
       if (vrt_is_platform_little_endian() && !program_args.do_byte_swap) {
           std::cerr << "Warning: Detected little endian platform, but byte swap is NOT enabled. This will only work on "
                        "non-conforming VRT packets."
                     << std::endl;
       } else if (program_args.do_byte_swap) {
           std::cerr << "Warning: Detected big endian platform, but byte swap IS enabled. This will only work on "
                        "non-conforming VRT packets."
                     << std::endl;
       }
   
       try {
           vrt::print::process(program_args);
       } catch (const std::exception& exc) {
           std::cerr << exc.what() << std::endl;
           return EXIT_FAILURE;
       } catch (...) {
           std::cerr << "Unknown error" << std::endl;
           return EXIT_FAILURE;
       }
   
       return EXIT_SUCCESS;
   }
